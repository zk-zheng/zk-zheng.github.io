{
  "doc/研发文档编写指南/表达风格/表达原则.html": {
    "href": "doc/研发文档编写指南/表达风格/表达原则.html",
    "title": "表达原则",
    "keywords": "表达原则 关注阅读者 文档作者及评审人员都应该尽量站在阅读者的角度思考问题，编写出满足用户需求的文档才可以称为高质量的文档。 可以从以下几个方面考虑： 文档的阅读者可能是不同的角色，不同角色对于文档的信息需求不同，不能够只是单一到考虑某个角色。 文档的阅读者的技术水平分布不同，对技术的理解深度不同，尽可能全面、清晰地将技术信息普及给阅读者。 对于操作型技术文档，除语言审校外，建议继续进行“文档可用性测试”——由一位无技术背景的测试人员参照该文档进行完整操作，如操作顺利成功，则该文档可用性测试通过；如失败，则需要继续修改完善文档。 对于操作型技术文档，不仅要准确描述操作步骤，还应设身处地考虑用户可能面临的问题，提供进一步的详细信息。例如，对于需要输入的信息，提供输入格式等详细要求；对于报错信息，提供解决报错的可选操作；为方便用户排查错误，提供详细的错误码速查列表等等。 语言简洁、直达观点 技术文档中应使用精练的语言。 建议作者在完成初稿后再通篇读一遍文档 ，将文中所有对表达意思没有明显作用的字、词、句删去，在不影响表达效果的前提下把文案长度减到最短。具体要求有： 禁止啰嗦冗长。 反例： 正例： 禁止逻辑混乱。 反例： 正例： 同一文档中勿重复表达同一事物。 尽量用 主动时态 ，尤其要 阐述清楚主语和宾语 。 反例： 正例： 不需额外解释 如果文档呈现的内容还需要额外的解释才可以让阅读者理解，则该文档不符合要求，需要继续采用文字或者图形的方式进行描述说明。"
  },
  "doc/研发文档编写指南/表达风格/注意细节.html": {
    "href": "doc/研发文档编写指南/表达风格/注意细节.html",
    "title": "注意细节",
    "keywords": "注意细节 标题如何描述 标题一般包括以下几种描述方式： 名词词组，比如：范围、产品全景、概述、场景。 主题词+动词，比如：编码器锁存、仿真加工、圆盘对刀、台面编辑。 动词+主题词，比如：回参考点、加工向导、设定坐标系。 标题描述的设计并无严格的模板，只要遵循以下几个原则即可： 标题能够概括反映本章节的主题思想。 标题简洁扼要、涵义明确。 同级别的标题尽量使用相同的结构。 使用标题的注意事项 下级标题禁止重复上一级标题的内容。 不建议标题以标点符号（如句号或问号）结尾。 不建议在标题中解释缩略语。 标题与标题之间应该有引导介绍性的句子。例如，一级标题和二级标题之间应有引言内容，二级标题和三级标题之间应有正文内容。 标题要避免孤立编号（即同级标题只有一个），正文不要有孤立的三级标题和四级标题。 项目列表是最小编号单位，因此项目列表下禁止嵌套任何级别的标题。 减少表格 尽量不使用表格。 标点符号 TBD"
  },
  "doc/研发文档编写指南/布局及格式/标题.html": {
    "href": "doc/研发文档编写指南/布局及格式/标题.html",
    "title": "标题",
    "keywords": "标题 文档的标题作为文档的内容分类， 可以很好的提示读者。 标题的编号 文档的标题的编号不应该有。 首先文档的名词上就不需要编号， 编号都只需要体现在toc.yml中。 并且docfx的页面呈现时， 会根据文档的标题， 在右边栏会体现标题结构。 标题的层级 文档中的标题层级严禁 超过四级 。所有文档的标题都必须从 一级标题 开始，逐级递增使用，禁止跳级。 <!--所谓跳级，比如：直接从二级标题开始；一级标题下面直接用三级标题等情况。--> 一级标题：即本.md文档标题。 可以和目录名称一致。 文档中若没有其它层级分类，可仅有一级标题，直接接正文描述。 二级标题：文档正文部分的标题。 二级标题根据文档内容可以有多个，比如描述功能规格的，包括概述、场景、参数等，则同为二级标题。 可仅有一级、二级标题。 三级标题：二级标题下面一级的小标题。 三级标题根据文档内容可以有多个，比如场景描述可以分为正常场景、异常场景，则同为三级标题。 一般文档三级标题即可完成对正文比较逻辑性的描述，不宜采用四级标题。 四级标题：三级标题下面一级的小标题。但特殊情况，可采用四级标题。 除一级标题可以仅存在一个，其它级别的标题至少有两个，即一级标题之后，不能够只有一个二级标题，此种情况直接为正文，其它级别同理。 <!--本文档标题层级按照该要求编写。-->"
  },
  "doc/研发文档编写指南/布局及格式/过程批注.html": {
    "href": "doc/研发文档编写指南/布局及格式/过程批注.html",
    "title": "过程批注",
    "keywords": "过程批注 文档编写和维护过程中需要添加的一些过程信息，便于文档发布前修改和优化，统称为过程批注。过程批注在文档基线或发布后可以删除。 待讨论话题 若有内容暂不确定，需要进一步的私下沟通、小组讨论等方式进一步的确认，应使用标签 【引用】进行标识，格式要求如下： 待讨论，时间：2022-4-21 责任人：祁彩云 暂未完成 若有内容确定要写，但因优先级低或者其它原因暂未开始或者未完成状态，应使用标签 【引用】进行标识，格式要求如下： TODO，时间：2022-4-24 责任人：祁彩云 评审批注 评审决议 文档经过讨论或者评审后需要根据决议进行相应修改的，应使用【引用】进行标识，格式要求如下： 评审决议：XXXXXXXXX，评审时间：2022-4-23 责任人：祁彩云 评审遗留问题 文档经过讨论或者评审后仍存在一些遗留问题，应使用【引用】进行标识，意味着仍需要进一步的确认和再次的评审，格式要求如下： 遗留问题：XXXXXXXXX，评审时间：2022-4-23 责任人：祁彩云 发现缺陷 文档中发现缺陷，应使用【引用】进行标识，格式要求如下： 缺陷：XXXXXXXXX，发现人：胡凯烽，修改人：祁彩云 其它说明 除以上情况的其它说明，应使用【注释】进行标识，格式要求如下： <!--注释：XXXXXXXXXXXXXXXXXXXXXXXXXX-->"
  },
  "doc/研发文档编写指南/布局及格式/元数据.html": {
    "href": "doc/研发文档编写指南/布局及格式/元数据.html",
    "title": "元数据",
    "keywords": "元数据 元数据用来标识文档的基本信息，诸如文档标题、作者、归属主题或关键字信息，通过该信息可以快速检索到相关文档。建议所有文档都需要标识元数据。 以下是应用在 Markdown 文章的 YAML 扉页中的元数据示例： title:XXXXX # the article title to show on the browser tab description:XXXXX # 115 - 145 character description to show in search results author: {github-id} # the author's GitHub ID - will be auto-populated if set in settings.json ms.author: {ms-alias} # the author's Microsoft alias (if applicable) - will be auto-populated if set in settings.json ms.date: {@date} # the date - will be auto-populated when template is first applied ms.topic: getting-started # the type of article 必须元数据 标题,该文档的标题，用于搜索的重要元数据。 描述，内容摘要，用于搜索结果呈现的重要元数据。 作者，编写人员，为文档的内容质量负责，后续遇到文档相关文档可以咨询，如果该作者离职，应该做人员交接变更，添加新的作者。 日期，文档最新发布日期，标识文档最新状态的时间。 主题，文档类型，描述文档归属，目前包括SRS、用户手册、技术方案。 ## 可选元数据 团队，文档归属团队，作者本人可能不归属于该团队的情况要添加归属团队。 评审者，审阅该文档的评审专家或者团队。"
  },
  "doc/研发文档编写指南/布局及格式/正文格式.html": {
    "href": "doc/研发文档编写指南/布局及格式/正文格式.html",
    "title": "正文格式",
    "keywords": "正文格式 标题之外，统称为正文。正文通过段落描述文档的具体内容，而在段落中间有些特殊的文字需要标识，突出文本的重点或者需要重视的部分。 段落 段落是根据文档或描述的功能的内容，划分的相对独立的部分。是构成正文的基本单元之一，由多个句子组成。 段落一般要求如下： 一个段落只能有一个主题，或一个中心句子。 段落的中心句子建议放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。 段落的长度没有严格的要求，但是建议尽量不要连续超过3行。 一个段落里避免只有一个句子。如果句子很长，要避免” 一逗到底 ”的情况，合理断句。 段落之间一个回车即可（.md格式），该默认的段落间距已考虑到可读性。 段落的句子语气应该使用陈述和肯定语气，避免使用感叹语气。 技术文档的段落开头不建议缩进，顶格开始即可。 对于技术描述类主题，应考虑先图表，后句子的原则，不要单一地使用段落来陈述主题。 粗体 适用于描述界面的元素，比如：菜单选项、对话框名称和输入字段名称时使用粗体。 正例：点击 开始 按钮， 启动自动加工。 斜体 适用于描述以下内容时使用斜体： 带有定义或解释的新术语简介。 文件名称、文件夹名称、路径。 用户输入。 > 正例：将 D:\\Weihong\\NcStudio\\ActiveConfig 复制到优盘中。 告警标签 警告 适用于描述如果错误操作，则可能导致操作人员伤亡或设备损坏。 Warning 尚未建立机械坐标系的情况下，不能正确进行行程极限检查。请在通电后重新建立连接后，执行了回参考点的状态下执行高速程序检测。 注意 适用于描述如果错误操作，则有可能导致操作无法完成。 Caution 在向外部I/O装置存取期间，请勿切断CNC的电源或拆除外部I/O装置。否则将会损坏外部I/O装置。 备注 适用于除警告和注意以外的补充说明。 Note USB存储器的可用空间不多或者文件数量较多时，向USB存储器的文件输入/输出操作有时需要一定的时间。这种情况下，请删除USB存储器中不需要的文件后再度进行操作。 在编写引用及告警标签时， 须保证与后续段落间保持一个空行 。"
  },
  "doc/研发文档编写指南/仓库及发布工具/Docfx.html": {
    "href": "doc/研发文档编写指南/仓库及发布工具/Docfx.html",
    "title": "Docfx 工具",
    "keywords": "Docfx 工具 简介 使用"
  },
  "doc/研发文档编写指南/仓库及发布工具/git&github.html": {
    "href": "doc/研发文档编写指南/仓库及发布工具/git&github.html",
    "title": "git&github",
    "keywords": "git&github 简介 git使用 github仓库"
  },
  "doc/研发文档编写指南/仓库及发布工具/VSCode.html": {
    "href": "doc/研发文档编写指南/仓库及发布工具/VSCode.html",
    "title": "VSCode",
    "keywords": "VSCode 简介 由于公司采用docfx生成研发文档， 推荐采用VS Code编写研发文档， 搭配微软提供的VS Code插件Docs Authoring Pack github . 优势如下： 展示层面： 告警标签与微软官方表现一致（typora不支持） 支持图表（mermaid） 编辑层面 支持快捷键插入告警标签 常用快捷键 Ctrl+K Ctrl+R : 展示vscode 键盘快捷方式参考， 会通过浏览器打开一个pdf， 如下图: F1 或 Ctrl+P: 调用主命令框 Ctrl+K Ctrl+S: 键盘快捷方式 Alt+D P：md预览 (中文输入法下不成功， 建议将快捷键换成Alt+D Alt+P. PS) 使用快捷键Ctrl+D+A， 快速输入Caution标签 输入快捷键Ctrl+K+S, 调出 键盘快捷方式 ， 修改命令Docs:Alert的快捷键绑定。 使用快捷键Ctrl+D+A， 选择Caution选项。 文档中就生成了如下文字： Caution Negative potential consequences of an action VSCode支持粘贴图片 由于之前习惯使用typora， 截屏后直接可以复制截屏图片到文档中， 但VScode自身不支持该操作。 但强大的VScode插件可提供。 推荐 Paste Image , 在扩展中（Ctrl+Shift+X)中搜索。 安装后， 可以在VS code的设置（Ctrl+,)中搜索pasteImage， 设置图片复制的默认路径。"
  },
  "doc/研发文档编写指南/具体章节编写参考/SRS-编写指导.html": {
    "href": "doc/研发文档编写指南/具体章节编写参考/SRS-编写指导.html",
    "title": "SRS-编写指导",
    "keywords": "SRS-编写指导 1 引言 1.1 目的（Purpose） 描述SRS文档的阅读用户及阅读重点。 概要描述SRS文档解决用户什么问题，属于主观愿望。 本章节由产品管理编写或分担其功能领域的角色。 ### 1.2 范围（Scope） 精确描述要研发的产品（软件）名称；（后续统一称为产品） 概要描述该产品具备的能力，将做什么或者不做什么； ### 1.3 定义、缩写和缩略语（Definitions and Acronyms） 解释SRS文档用到的术语、简写和略缩语的定义，格式建议：XXXX-XXXX-XXXX，术语/略缩语/简写-描述-参考文献/标准。 ### 1.4 引用文件 提供该SRS引用的所有文件的完整清单，格式建议：XXXX-XXXX-XXXX-XXXX-XXXX，名称-描述-版本-更新日期-归属团队。 ### 1.5 综述 概要描述本文档其余各个章节包含的内容及组织方式。 ## 2 总体描述 ### 2.1 产品全景 全景级别的描述产品的结构，推荐使用框图/结构图，描述产品内部组成图、上下文图及外部系统之家的关系。 产品在各种约束条件下如何运行，包括系统接口、用户界面、硬件接口、软件接口、通讯接口、内存、运行条件等，如果该部分内容比较多，可以在下面分章节描述。 以下章节都属于概要性的信息，详细需求会在具体需求里面描述，此处以较高层次对需求进行概括性的总结。 如果如果某些项目该部分确实没有，可以写\"无\"。有些是前期未能够识别的，可以先标注TBD，后期遇到问题再补充。 #### 2.1.1 系统接口 什么情况需要写？ 组合的复杂的系统，有多个子系统或者大的软件功能，以及涉及到之间的接口交互，应该对其接口进行描述 #### 2.1.2 用户界面 定义：用户界面是指用户对界面的图形化方式、屏幕布局、标准按钮、告警显示方式、指示灯等外观视觉特征的要求，并不需要罗列真实的用户界面。 将要采用的图形用户界面(GUI)标准、产品系列的风格。 屏幕布局或解决方案的限制。 快捷键。 错误信息显示标准。如果公司或者团队有“产品级的用户界面标准”，可以直接引用，“产品级的用户界面标准”未描述到个性化的/额外的用户界面要求，可以在此描述。 > 评审决议：如果该用户界面不是用户直接提出或者经过充分分析确定的最终界面，不要在SRS里面呈现，先描述为用户故事。（用户界面某种程度上属于方案。基本步骤：1-先描述用户故事 2-再画原型图 3-最后设计最终的用户界面） #### 2.1.3 硬件接口 什么情况需要写？产品不仅仅是软件系统，也包括实现产品功能所需要的硬件系统或组件，则需要对软硬接口进行描述。 #### 2.1.4 软件接口 什么情况需要写？产品需要对其他软件产品使用，a）对于使用的其他软件产品，应明确其名称、助记符、编号、版本号、来源等 b）对产品的具体使用的接口应进行定义，包括接口描述、接口目的、格式等，对于已经文件化的接口，可以直接引用即可。 #### 2.1.5 通信接口 定义网络通信接口或协议。 #### 2.1.6 内存 描述本产品对于内存的使用特征和限制。 #### 2.1.7 运行 描述本产品运行所需要的环境等信息。 #### 2.1.8 现场适应性需求等 其它现场环境相关的信息。 #### 2.1.9 其它 除模板里面建议描述的，如果有额外的，可以自行补充，比如操作等。 ### 2.2 产品功能 概要描述产品主要功能、性能指标、软件系统属性（质量属性）、外部接口等，详细内容在[3具体需求]章节描述，本章节将不涉及功能细节。（高层需求？ 推荐采用用户故事的格式描述）。格式建议：XXXX-XXXX，功能名称-功能概述--> ### 2.3 用户特点 描述使用该产品的不同用户信息及特征，格式建议：XXXX-XXXX，使用用户-特殊说明。 ### 2.4 约束 研发该产品的限制条件，如法规政策、硬件局限、保密安排、技术相关标准（协议）、运行环境等，这些相关的内容是影响产品的障碍和局限，如果不重视则会导致风险。 ### 2.5 假设与依赖关系 描述影响SRS规定需求的各个因素，该因素因为存在不确定性，其变更将会影响SRS的变更。假设和依赖没有问题，则产品质量或者项目交付时间将可能没有问题；如果假设和依赖有问题，则产品质量或者项目交付时间很大程度有问题。 ### 2.6 需求分配 未来需求。可以填写“无”。 ## 3 具体需求 描述足够详细的需求，使设计人员能够设计系统以满足这些需求，使测试人员能够测试系统以验证满足这些需求。至少应该包括输入、输出及处理输入以达到满足输出的所有逻辑。 输入/输出需要有明确的类型/格式、范围、输入个数。 处理逻辑需要包含正常处理和异常处理。--> ### 3.1 外部接口需求 详细描述产品所有的外部输入及输出，同时提供包括用户界面、硬件接口、软件接口、通信接口等的详细描述及基本的用户界面原型。 2.1是概要的描述，这里是详细的描述。 ### 3.2 功能需求 > 该部分暂不做要求。"
  },
  "doc/研发文档编写指南/具体章节编写参考/技术方案编写指导.html": {
    "href": "doc/研发文档编写指南/具体章节编写参考/技术方案编写指导.html",
    "title": "",
    "keywords": "TODO"
  },
  "doc/研发文档编写指南/具体章节编写参考/用户手册编写指导.html": {
    "href": "doc/研发文档编写指南/具体章节编写参考/用户手册编写指导.html",
    "title": "",
    "keywords": "TODO"
  },
  "doc/研发文档编写指南/目录结构及命名/目录的组织.html": {
    "href": "doc/研发文档编写指南/目录结构及命名/目录的组织.html",
    "title": "目录组织",
    "keywords": "目录组织 docfx文档需要有个导航栏， 推荐使用toc.yml组织。 本文将介绍toc.yml的一般组织形式。 1.数据模型 数据样例如下： - name: Topic1 href: Topic1.md - name: Topic2 href: Topic2.md - name: Topic3 items: - name: Topic2_1 href: Topic2_1.md Note 注意：属性名大小写敏感。 toc是Table of Content的缩写， 一般指目录。 name: 必须的， 指定TOC 项的标题。 href: 可选的，指定TOC 项的导航路径。如果未指定 href ，则 TOC Item 作为其子 TOC Items 的父容器。推荐使用相对路径。 items: 可选的， 指定当前目录项的子目录项。 参考资料： Table-Of-Content (TOC) Files YAML Ain’t Markup Language (YAML™) version 1.2"
  },
  "doc/研发文档编写指南/目录结构及命名/目录规范.html": {
    "href": "doc/研发文档编写指南/目录结构及命名/目录规范.html",
    "title": "目录规范",
    "keywords": "目录规范 参考文档《软件项目目录与文件管理规范-R3.1》的【目录结构】章节。要求如下： 仓库必须符合本节要求的目录结构。 原则 宜采用浅的目录结构，或者称为扁平的目录结构。 可选文件和目录，应等到需要的时候再去建立。 目录和文件名应尽可能采用英文。 请注意，目录和文件名的大小写必须符合规定。这是因为考虑到linux平台的可移植性。 ### git 服务器端的目录和文件结构 <project-name>/ ; project root dir +-- doc/ +-- srs/ +-- pm/ +-- risk.md +-- roles.md +-- stakeholder.md +-- src/ +-- test/ +-- .editorconfig ; or `.clang-format` +-- .gitattributes +-- .gitignore +-- README.md +-- <project-name>.sln > [!NOTE] > 《软件项目目录与文件管理规范-R3.1》文档由软件部维护和发布，请参考当前最新版本。"
  },
  "doc/研发文档编写指南/目录结构及命名/目录命名.html": {
    "href": "doc/研发文档编写指南/目录结构及命名/目录命名.html",
    "title": "目录命名",
    "keywords": "目录命名 不同文档的目录命名不尽相同，当前主要对SRS的目录结构进行约束，后续其它文档诸如用户手册、技术方案等文档待明确后，再根据情况进行说明。 SRS第1&2章节 SRS的前面两个章节，完全和国标的SRS保持一致。每个章节都有独立的.md文件。 +-- 引言/ +-- 目的.md +-- 范围.md +-- 定义、缩写和略缩语.md +-- 引用文件.md +-- 综述.md +-- 总体描述/ +-- 产品全景.md +-- 产品功能.md +-- 用户特点.md +-- 约束.md +-- 假设和依赖关系.md +-- 需求分配.md SRS第3&后续章节 SRS的第3及后续章节暂时不做限制，平台和产品线根据情况自行确定，但是分类要保证具备一定的逻辑性，这样才可以保证功能归属的合理性及无冲突性。 <!--什么是合理性和无冲突性？比如一个功能根据目录分类可以非常明确的只能够归属到某个分类，而不是放到分类1和分类2都觉得可以。--> 举例说明： NK310M第3&后续章节完全参考竞品Funac的连接说明书。 ## 用户手册 本章节暂未提供内容，时间暂不确定。 ## 技术方案 本章节暂未提供内容，时间暂不确定。"
  },
  "doc/研发文档编写指南/目录结构及命名/章节顺序.html": {
    "href": "doc/研发文档编写指南/目录结构及命名/章节顺序.html",
    "title": "章节顺序",
    "keywords": "章节顺序 不应对目录的各个章节进行编号，而应该通过docfx工具的toc.yml来配置章节顺序。如下事例： items: - name:引言 href:引言.md items: - name:目的 href:目的.md - name:范围 href:范围.md - name:定义、缩写和略缩语 href:定义、缩写和略缩语.md - name:引用文件 href:引用文件.md - name:综述 href:综述.md - name:总体描述 href:总体描述.md items: - name:产品全景 href:产品全景.md - name:产品功能 href:产品功能.md - name:用户特点 href:用户特点.md - name:约束 href:约束.md - name:假设和依赖关系 href:假设和依赖关系.md - name:需求分配 - name:需求分配.md"
  },
  "doc/研发文档编写指南/文件格式-Markdown/基本语法.html": {
    "href": "doc/研发文档编写指南/文件格式-Markdown/基本语法.html",
    "title": "基本.md语法",
    "keywords": "基本.md语法 链接🔗"
  },
  "doc/研发文档编写指南/文件格式-Markdown/增强可读性语法.html": {
    "href": "doc/研发文档编写指南/文件格式-Markdown/增强可读性语法.html",
    "title": "增强可读性语法",
    "keywords": "增强可读性语法 警示信息（Alert） 使用不同的警示信息将会在文档中呈现不同的颜色标记，以此用来区分警示信息的重要程度。Typora编辑器则不能够直接显示预览效果，使用VSCode可以预览效果或者通过Docfx转换后的文档则可以显示。 特别提示 Note 即使是略读也应该关注的特别信息。（Information the user should notice even if skimming.） 小贴士 Tip 想更深入理解文档需要的提示信息。（Optional information to help a user be more successful.） 重要提醒 Important 用户不能够忽略的关键信息。（Essential information required for user success.） 注意事项 Caution 操作失误可能引起的潜在风险。（Negative potential consequences of an action.） 警告 Warning 操作失误将会导致触发风险。（Dangerous certain consequences of an action.） 文本格式 粗体 这个文本是 粗体 。 斜体 这个文本是 斜体 。 粗体&斜体 这个文本是 粗体&斜体 。 代码块 CSharp代码块 public static void Log(string message) { _logger.LogInformation(message); } 尖括号 如果在文件中的文本里使用尖括号（例如要表示占位符），则需要对尖括号手动编码。 否则，Markdown 会认为它们是一个 HTML 标记。 例如，将"
  },
  "doc/研发文档编写指南/研发文档编写规范.html": {
    "href": "doc/研发文档编写指南/研发文档编写规范.html",
    "title": "研发文档编写规范(草稿)",
    "keywords": "研发文档编写规范(草稿) 目的 为了规范研发文档的编写， 提高文档的一致性。 范围 适用于研发过程中的资产性文档（如软件需求说明书SRS， 即Software Requirement Specification）。 术语和定义 docfx: 微软公司推出的针对研发文档的组织软件。 toc文件：指docfx中组织文档的目录性文件。 规则：进⾏UI设计或UI调整时必须遵守的规定 原则：设计时指导性的约定 说明：对此规则或原则的必要解释 正例：对此规则给出正确例⼦ 反例：对此规则给出反⾯例⼦ 例外：对此规则给出例外的说明 背景 公司内部的资产性文档会通过docfx工具生成并展示， 为了更好的保证文档的生成及展示， 也为了帮助团队对文档形式上的统一认识， 以免产生在文档形式上的纠结。 具体规范 研发文档的组织 【规则】 文档间结构的组织统一由toc.yml控制， 一个文档输出保证必须只有一个toc文件。 说明：Phoenix团队的Phoenix产品SRS保证只有一个toc文件； 桥切机项目的SRS保证只有一个toc文件。 【规则】 研发类文档统一使用md（markdown）文件编写。 说明：markdown文件可以使编写者更加专注于文档的内容， 并且能达到形式上的统一。 【原则】 文档的目录尽可能浅。 说明：由于文档的呈现主要依靠toc.yml来呈现， 目录结构没有必要很深。 研发文档标题 【规则】 标题中禁止使用编号。 说明：编号可以在toc.yml文件中体现， 而无需在文档标题中表现。 文档中的标题已足够能体现文档的结构。 【规则】 所有文档的标题都必须从一级标题开始，逐级递增使用，不允许跳级。 说明：比如不能够直接二级标题开始；一级标题下面不能直接用三级标题。 一级标题：即本.md文档标题，和对应目录名称一致。 二级标题：文档正文部分的标题。 三级标题：二级标题下面一级的小标题。 四级标题：三级标题下面一级的小标题。内文不超过 四级 标题。 研发文档正文 【原则】 对于图表类的展示， 采用mermaid编写。 说明：mermaid对各种图表支持较为丰富， 并且从工具集的考量， 目前 vs code +插件 Docs Authoring Pack 对mermaid的支持较好。 【原则】 告警类标签的约定。 说明：为了让读者更加重视本段落内容， 可以添加告警类标签。 约定如下： 警告：适用于描述如果错误操作，则可能导致操作人员伤亡或设备损坏。 > [!WARNING] > 尚未建立机械坐标系的情况下，不能正确进行行程极限检查。请在通电后重新建立连接后，执行了回参考点的状态下执行高速程序检测。 注意：适用于描述如果错误操作，则有可能导致操作无法完成。 > [!CAUTION] > 在向外部I/O装置存取期间，请勿切断CNC的电源或拆除外部I/O装置。否则将会损坏外部I/O装置。 备注：适用于除警告和注意以外的补充说明。 > [!NOTE] > USB存储器的可用空间不多或者文件数量较多时，向USB存储器的文件输入/输出操作有时需要一定的时间。这种情况下，请删除USB存储器中不需要的文件后再度进行操作。"
  },
  "doc/研发文档编写指南/引言/范围.html": {
    "href": "doc/研发文档编写指南/引言/范围.html",
    "title": "范围",
    "keywords": "范围 本指南规范了维宏技术文档的风格和基本编写要求。主要包含以下几个章节进行描述： 目录结构及命名 布局及格式 表达风格 具体章节编写参考 文档格式-Markdown 仓库及发布工具 文档案例 也希望大家在使用过程中多多提出建议，共同持续改进该指南，为公司的文档标准化共同努力。"
  },
  "doc/研发文档编写指南/引言/目的.html": {
    "href": "doc/研发文档编写指南/引言/目的.html",
    "title": "目的",
    "keywords": "目的 为了统一公司文档风格，提高文档的可读性，确保公司对内、对外输出的各种技术文档能够一致，便于阅读理解，减少不必要的沟通成本，提高文档的可复用性。 本文档的主要阅读对象和建议如下： 文档编写人员 SRS编写人员（如产品管理、架构、开发及UE） 用户手册、技术方案等文档编写人员 文档评审人员 参与文档评审的人员（如测试、UE及相关编写人员）"
  },
  "doc/研发文档编写指南/引言/用词说明.html": {
    "href": "doc/研发文档编写指南/引言/用词说明.html",
    "title": "用词说明",
    "keywords": "用词说明 为了便于在执行本标准条文时区别对待，对要求严格程度不同的用词说明如下： 表示很严格，非这样做不可的用词：正面词采用“必须”，反面词采用“严禁”； 表示严格，在正常情况下均应这样做的用词：正面词采用“应”，反面词采用“不应”或“不得”； 表示允许稍有选择，在条件许可时首先应这样做的用词：正面词采用“宜”，反面词采用“不宜”； 表示有选择，在一定条件下可以这样做的用词，采用“可”。 > [!NOTE] > 《软件项目目录与文件管理规范-R3.1》文档由软件部维护和发布，请参考当前最新版本。"
  },
  "README.html": {
    "href": "README.html",
    "title": "DevDocContribute",
    "keywords": "DevDocContribute writting guide of the dev docs usage 前置条件： 安装 choco 工具， 参考这里 Step 1: 安装docfx choco install docfx Step 2: 编译站点 切换当前目录到仓库根目录 docfx build Step 3: 运行web服务 切换当前目录到仓库根目录。 该命令仅仅将_site目录作为web站点发布。 docfx serve _site Step 4: 打开浏览器， 输入： http://localhost:8080/doc/index.html"
  }
}